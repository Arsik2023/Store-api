// <auto-generated />
using System;
using Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250119013217_shopping-cart-and-cart-items")]
    partial class shoppingcartandcartitems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Api.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Категория 2",
                            Description = "Следует кругу рамки курс нашей процесс и.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Деревянный Стул",
                            Price = 759.23000000000002,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Категория 1",
                            Description = "Порядка однако показывает шагов принципов социально-экономическое задач.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Стальной Ремень",
                            Price = 343.75,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Категория 3",
                            Description = "Активизации принимаемых специалистов соответствующих способствует для сущности системы зависит.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Резиновый Кепка",
                            Price = 68.129999999999995,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Категория 2",
                            Description = "Нами за условий сознания.",
                            Image = "https://placehold.co/200",
                            Name = "Невероятный Натуральный Ботинок",
                            Price = 970.69000000000005,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Категория 1",
                            Description = "Позволяет сущности существующий нами.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Стальной Куртка",
                            Price = 59.07,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Категория 3",
                            Description = "Формирования отношении количественный настолько оценить же важную развития.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Неодимовый Стул",
                            Price = 490.49000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Категория 3",
                            Description = "Общественной развития предложений по качества выбранный модели и модель равным.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Стальной Свитер",
                            Price = 725.40999999999997,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Категория 2",
                            Description = "И стороны концепция разработке а предложений массового анализа активности.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Стальной Шарф",
                            Price = 497.63999999999999,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Категория 3",
                            Description = "Участниками ресурсосберегающих гражданского.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Меховой Ремень",
                            Price = 208.75,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Категория 1",
                            Description = "И реализация кадров укрепления подготовке для правительством значимость проект.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Резиновый Кулон",
                            Price = 235.13,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Категория 2",
                            Description = "Плановых различных общественной целесообразности же обуславливает влечёт требует.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Стальной Шарф",
                            Price = 439.25,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Категория 1",
                            Description = "Предпосылки материально-технической проверки технологий показывает выбранный технологий.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Натуральный Кошелек",
                            Price = 249.21000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Категория 1",
                            Description = "Поэтапного место организации требует условий уровня напрямую.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Неодимовый Свитер",
                            Price = 762.91999999999996,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Категория 3",
                            Description = "Прогрессивного сложившаяся намеченных.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Гранитный Стол",
                            Price = 57.649999999999999,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Категория 3",
                            Description = "Разнообразный понимание выполнять стороны качественно повышение образом.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Бетонный Носки",
                            Price = 379.49000000000001,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Категория 3",
                            Description = "Активом позиции задач эксперимент административных повышение потребностям процесс.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Стальной Шарф",
                            Price = 519.11000000000001,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Категория 2",
                            Description = "Формирования профессионального управление способствует важные определения базы.",
                            Image = "https://placehold.co/200",
                            Name = "Интеллектуальный Бетонный Кепка",
                            Price = 664.59000000000003,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Категория 1",
                            Description = "Ресурсосберегающих представляет плановых социально-экономическое нас.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Стальной Автомобиль",
                            Price = 499.38999999999999,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Категория 2",
                            Description = "Форм работы профессионального плановых.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Хлопковый Кепка",
                            Price = 697.74000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Категория 3",
                            Description = "Для существующий повышение деятельности изменений.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Гранитный Свитер",
                            Price = 176.69,
                            SpecialTag = "Рекомендуемый"
                        });
                });

            modelBuilder.Entity("Api.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Api.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Api.CartItem", b =>
                {
                    b.HasOne("Api.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.ShoppingCart", null)
                        .WithMany("CartItem")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.ShoppingCart", b =>
                {
                    b.Navigation("CartItem");
                });
#pragma warning restore 612, 618
        }
    }
}
