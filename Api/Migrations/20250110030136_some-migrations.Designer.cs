// <auto-generated />
using System;
using Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250110030136_some-migrations")]
    partial class somemigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Категория 3",
                            Description = "Направлений поставленных современного эксперимент за.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Хлопковый Майка",
                            Price = 928.95000000000005,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Категория 3",
                            Description = "Новых уровня модернизации национальный финансовых.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Кожанный Ботинок",
                            Price = 55.890000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Категория 1",
                            Description = "Задач поэтапного а создаёт социально-экономическое этих.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Бетонный Клатч",
                            Price = 990.46000000000004,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Категория 1",
                            Description = "Начало идейные важную практика постоянный этих подготовке структуры разнообразный.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Деревянный Компьютер",
                            Price = 824.15999999999997,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Категория 2",
                            Description = "Разнообразный требует материально-технической собой.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Неодимовый Кошелек",
                            Price = 511.10000000000002,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Категория 2",
                            Description = "Гражданского повышение степени инновационный всего задания.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Неодимовый Шарф",
                            Price = 596.37,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Категория 1",
                            Description = "Уточнения нашей формирования.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Пластиковый Кепка",
                            Price = 907.36000000000001,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Категория 3",
                            Description = "А активизации новых качественно количественный а опыт понимание.",
                            Image = "https://placehold.co/200",
                            Name = "Эргономичный Деревянный Куртка",
                            Price = 362.60000000000002,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Категория 1",
                            Description = "Богатый прежде материально-технической.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Меховой Кошелек",
                            Price = 741.48000000000002,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Категория 3",
                            Description = "Повседневной способствует равным целесообразности активом.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Кожанный Автомобиль",
                            Price = 676.40999999999997,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Категория 1",
                            Description = "Экономической модернизации а таким нас финансовых повседневная сфера напрямую таким.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Хлопковый Ножницы",
                            Price = 948.84000000000003,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Категория 3",
                            Description = "Обеспечение модель нас позволяет воздействия условий для административных определения социально-ориентированный.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Неодимовый Майка",
                            Price = 891.28999999999996,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Категория 1",
                            Description = "Для уточнения уточнения требует показывает информационно-пропогандистское современного.",
                            Image = "https://placehold.co/200",
                            Name = "Интеллектуальный Деревянный Сабо",
                            Price = 290.11000000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Категория 1",
                            Description = "Концепция систему напрямую постоянное.",
                            Image = "https://placehold.co/200",
                            Name = "Эргономичный Кожанный Компьютер",
                            Price = 466.94,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Категория 2",
                            Description = "Курс существующий принципов кругу.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Кожанный Портмоне",
                            Price = 145.12,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Категория 3",
                            Description = "Эксперимент широкому дальнейших формированию.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Деревянный Кепка",
                            Price = 359.06,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Категория 2",
                            Description = "Правительством повышение постоянный насущным обеспечение нами модернизации начало отметить.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Бетонный Сабо",
                            Price = 599.63,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Категория 1",
                            Description = "Плановых этих базы этих оценить.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Натуральный Стол",
                            Price = 527.76999999999998,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Категория 3",
                            Description = "Очевидна с развития финансовых же.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Кожанный Компьютер",
                            Price = 163.28999999999999,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Категория 3",
                            Description = "Повседневная проект по качества процесс позволяет подготовке задач широкому.",
                            Image = "https://placehold.co/200",
                            Name = "Грубый Резиновый Майка",
                            Price = 587.46000000000004,
                            SpecialTag = "Рекомендуемый"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Api.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
